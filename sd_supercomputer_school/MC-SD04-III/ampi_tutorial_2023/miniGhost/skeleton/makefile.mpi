#@header
# ************************************************************************
#
#      miniGhost: stencil computations with boundary exchange.
#              Copyright (2012) sandia corporation
#
# Under terms of Contract DE-AC04-94AL85000, there is a non-exclusive
# license for use of this work by or on behalf of the U.S. Government.
#
# This library is free software; you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as
# published by the Free Software Foundation; either version 2.1 of the
# License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
# USA
# Questions? Contact Richard F. Barrett (rfbarre@sandia.gov) or
#                    Michael A. Heroux (maherou@sandia.gov)
#
# ************************************************************************
#@header

# Simple hand-tuned makefile, configured for the gnu compiler and MPICH.
# Modify as necessary for your environment.

#-----------------------------------------------------------------------

# Charm++/AMPI installation, for tutorial purposes
CHARM_DIR = /ui/cwi/earamos/tutorial/charm
ifeq (,$(wildcard $(CHARM_DIR)))
  CHARM_DIR = ~/tutorial/charm
endif
ifeq (,$(wildcard $(CHARM_DIR)))
  CHARM_DIR = ~/charm
endif

# Option: -D_MG_SERIAL
PROTOCOL = -D_MG_MPI

# State precision: -D_REAL4 and/or -D_REAL8.
REAL_PRECISION = -D_MG_REAL8
# Integer precision: -D_INT4 and/or -D_INT8.
INT_PRECISION = -D_MG_INT4

# Compilers
#FC=mpif90
#CC=mpicc
FC=$(CHARM_DIR)/bin/ampif90
CC=$(CHARM_DIR)/bin/ampicc

CFLAGS = $(PROTOCOL) $(REAL_PRECISION) $(INT_PRECISION)
# C main calling Fortran subroutine:
CFLAGS += -Df2c_

FFLAGS = $(PROTOCOL) $(REAL_PRECISION) $(INT_PRECISION)

# Optimization
OPT_F = -g -O2

FFLAGS += $(OPT_F)
# Free-form Fortran source code:
FFLAGS += -ffree-form -ffree-line-length-0   # if using gfortran
#FFLAGS += -free                             # if using ifort

# Compile to include checkpointing capability.
#FFLAGS += -D_MG_CHECKPT

AMPI_TLSGLOBALS := -tlsglobals -fopenmp
CFLAGS += $(AMPI_TLSGLOBALS)
FFLAGS += $(AMPI_TLSGLOBALS)

AMPI_LB="-memory isomalloc -module CommonLBs"
AMPI_PROB="-tracemode projections"

LD=$(FC)
LDFLAGS=$(CFLAGS) #$(AMPI_PROJ} $(AMPI_LB)
LIBS=

include make_targets

# End makefile
