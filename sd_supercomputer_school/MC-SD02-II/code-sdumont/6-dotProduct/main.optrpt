Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.5.0 Build 20211109_000000

Compiler options: -qopt-report=5 -no-vec -qopenmp -xHost -Wall -Wextra -c -o main.o

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: main(int, char **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main(int, char **)) [1/3=33.3%] main.c(11,32)
  -> EXTERN: (18,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (19,3) exit(int)
  -> INLINE (MANUAL): (22,6) atoll(const char *) (isz = 3) (sz = 10)
    -> EXTERN: /usr/include/stdlib.h:(294,10) strtoll(const char *__restrict__, char **__restrict__, int)
  -> EXTERN: (27,2) printf(const char *__restrict__, ...)
  -> EXTERN: (29,15) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (31,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (32,3) exit(int)
  -> EXTERN: (35,15) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (37,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (38,3) exit(int)
  -> EXTERN: (46,10) omp_get_wtime(void)
  -> EXTERN: (47,6) dot_product(double *, double *, long long)
  -> EXTERN: (48,8) omp_get_wtime(void)
  -> EXTERN: (52,2) printf(const char *__restrict__, ...)
  -> INLINE: (52,60) check(double, int) (isz = 1) (sz = 9)
  -> EXTERN: (54,2) _mm_free(void *)
  -> EXTERN: (55,2) _mm_free(void *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at main.c(41,2)
   remark #15540: loop was not vectorized: auto-vectorization is disabled with -no-vec flag
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at main.c(41,2)
<Remainder>
LOOP END

    Report from: Code generation optimizations [cg]

main.c(11,32):remark #34051: REGISTER ALLOCATION : [main] main.c:11

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   17[ rax rdx rcx rsi rdi r8-r11 r13-r15 zmm0-zmm4]
        
    Routine temporaries
        Total         :     104
            Global    :      29
            Local     :      75
        Regenerable   :      33
        Spilled       :       5
        
    Routine stack
        Variables     :       4 bytes*
            Reads     :       2 [0.00e+00 ~ 0.0%]
            Writes    :       2 [0.00e+00 ~ 0.0%]
        Spills        :      16 bytes*
            Reads     :       2 [1.72e+00 ~ 1.7%]
            Writes    :       2 [1.72e+00 ~ 1.7%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: atoll(const char *)

    Report from: Interprocedural optimizations [ipo]

NEVER EMIT DEFINITION FUNCTION: (atoll(const char *))/usr/include/stdlib.h(293,1)

===========================================================================

Begin optimization report for: check(double, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (check(double, int)) main.c(7,35)

===========================================================================
